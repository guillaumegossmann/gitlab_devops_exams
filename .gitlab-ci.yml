variables:
  REGISTRY: $CI_REGISTRY
  GATEWAY_IMAGE: $CI_REGISTRY_IMAGE/gateway
  USERS_IMAGE: $CI_REGISTRY_IMAGE/users
  ORDERS_IMAGE: $CI_REGISTRY_IMAGE/orders
  IP_VM: 127.0.0.1
  NODEPORT_DEV_GATEWAY: 30000
  NODEPORT_QA_GATEWAY: 30001
  NODEPORT_STAGING_GATEWAY: 30002
  NODEPORT_PROD_GATEWAY: 30003
  NODEPORT_DEV_USERS: 30010
  NODEPORT_QA_USERS: 30011
  NODEPORT_STAGING_USERS: 30012
  NODEPORT_PROD_USERS: 30013
  NODEPORT_DEV_ORDERS: 30020
  NODEPORT_QA_ORDERS: 30021
  NODEPORT_STAGING_ORDERS: 30022
  NODEPORT_PROD_ORDERS: 30023
  
image:
  name: "python:3.11-alpine"
  entrypoint: ["/bin/sh", "-c"]

stages:
  - test
  - build
  - deploy-dev
  - deploy-qa
  - deploy-staging
  - deploy-prod

# test-gateway:
#   stage: test
#   script:
#     - cd gateway
#     - pip install -r requirements.txt
#     # - flake8 gateway users orders  # Analyse de style avec flake8
#     - python3 -m pytest --capture=no  # Exécution des tests avec Python

test-users:
  stage: test
  script:
    - cd users
    - pip install -r requirements.txt
    - python3 -m unittest discover tests/

# test-orders:
#   stage: test
#   script:
#     - cd orders
#     - pip install -r requirements.txt
#     # - flake8 gateway users orders  # Analyse de style avec flake8
#     - python3 -m pytest --capture=no  # Exécution des tests avec Python

build-gateway:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd gateway
    - docker build -t $GATEWAY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $GATEWAY_IMAGE:$CI_COMMIT_SHORT_SHA

build-users:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd users
    - docker build -t $USERS_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $USERS_IMAGE:$CI_COMMIT_SHORT_SHA

build-orders:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd orders
    - docker build -t $ORDERS_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $ORDERS_IMAGE:$CI_COMMIT_SHORT_SHA

stop-dev:
  stage: deploy-dev
  variables:
    NAMESPACE: dev
  when: manual
  # Don't stop the "review" for master branch or tags,
  # it is only for branches (so PRs (most of the time))
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    action: stop
  script:
    - sudo helm uninstall orders -n $NAMESPACE
    - sudo helm uninstall users -n $NAMESPACE
    - sudo helm uninstall gateway -n $NAMESPACE

stop-qa:
  stage: deploy-qa
  variables:
    NAMESPACE: qa
  when: manual
  # Don't stop the "review" for master branch or tags,
  # it is only for branches (so PRs (most of the time))
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    action: stop
  script:
    - sudo helm uninstall orders -n $NAMESPACE
    - sudo helm uninstall users -n $NAMESPACE
    - sudo helm uninstall gateway -n $NAMESPACE

stop-staging:
  stage: deploy-staging
  variables:
    NAMESPACE: staging
  when: manual
  # Don't stop the "review" for master branch or tags,
  # it is only for branches (so PRs (most of the time))
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    action: stop
  script:
    - sudo helm uninstall orders -n $NAMESPACE
    - sudo helm uninstall users -n $NAMESPACE
    - sudo helm uninstall gateway -n $NAMESPACE

.do_testing:
  services:
    - docker:dind
  before_script:
    - echo "$KUBE_CONFIG" # Débuggage
    - cat "$KUBE_CONFIG" # Débuggage
    - echo "$KUBECONFIG" # Débuggage
    - cat "$KUBECONFIG" # Débuggage
    - echo "$NAMESPACE" # Débuggage
    - echo "$CI_BUILD_REF_NAME" # Débuggage
    # - kubectl get nodes  # Vérification de la connectivité au cluster
    - rm -Rf ~/.kube
    - mkdir ~/.kube/
    - ls
    - kubectl config view --raw # Débuggage
    - cat $KUBE_CONFIG > ~/.kube/config
    - kubectl config view --raw # Débuggage
    - cat $KUBE_CONFIG > $KUBECONFIG
    - kubectl config view --raw # Débuggage
    # - kubectl config view --raw >~/.kube/config
    - curl -k https://127.0.0.1:6443 # Débuggage
    - kubectl get pods -n $NAMESPACE # Débuggage
    - chmod 600 /home/gitlab-runner/builds/t3_zZzCth/0/guillaume.gmn/gitlab_devops_exams.tmp/KUBECONFIG
    - cp ./charts/gateway/values.yaml values-gateway.yml
    - cat values-gateway.yml # Débuggage
    - cp ./charts/users/values.yaml values-users.yml
    - cat values-users.yml # Débuggage
    - cp ./charts/orders/values.yaml values-orders.yml
    - cat values-orders.yml # Débuggage

deploy-dev:
  image: docker:latest
  variables:
    NAMESPACE: dev
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    url: http://$IP_VM:$NODEPORT_DEV
    on_stop: stop-dev
  stage: deploy-dev
  extends: .do_testing
  script:
    - helm upgrade --install gateway ./charts/gateway -n $NAMESPACE --values=values-gateway.yml --set image.repository="$CI_REGISTRY_IMAGE/gateway" --set service.nodeport="$NODEPORT_DEV_GATEWAY"
    - helm upgrade --install users ./charts/users -n $NAMESPACE --values=values-users.yml --set image.repository="$CI_REGISTRY_IMAGE/users" --set service.nodeport="$NODEPORT_DEV_USERS"
    - helm upgrade --install orders ./charts/orders -n $NAMESPACE --values=values-orders.yml --set image.repository="$CI_REGISTRY_IMAGE/orders" --set service.nodeport="$NODEPORT_DEV_ORDERS"
    
deploy-qa:
  image: docker:latest
  variables:
    NAMESPACE: qa
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    url: http://$IP_VM:$NODEPORT_QA
    on_stop: stop-qa
  stage: deploy-qa
  extends: .do_testing
  script:
    - helm upgrade --install gateway ./charts/gateway -n $NAMESPACE --values=values-gateway.yml --set image.repository="$CI_REGISTRY_IMAGE/gateway" --set service.nodeport="$NODEPORT_QA_GATEWAY"
    - helm upgrade --install users ./charts/users -n $NAMESPACE --values=values-users.yml --set image.repository="$CI_REGISTRY_IMAGE/users" --set service.nodeport="$NODEPORT_QA_USERS"
    - helm upgrade --install orders ./charts/orders -n $NAMESPACE --values=values-orders.yml --set image.repository="$CI_REGISTRY_IMAGE/orders" --set service.nodeport="$NODEPORT_QA_ORDERS"


deploy-staging:
  image: docker:latest
  variables:
    NAMESPACE: staging
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    url: http://$IP_VM:$NODEPORT_STAGING
    on_stop: stop-staging
  stage: deploy-staging
  extends: .do_testing
  script:
    - helm upgrade --install gateway ./charts/gateway -n $NAMESPACE --values=values-gateway.yml --set image.repository="$CI_REGISTRY_IMAGE/gateway" --set service.nodeport="$NODEPORT_STAGING_GATEWAY"
    - helm upgrade --install users ./charts/users -n $NAMESPACE --values=values-users.yml --set image.repository="$CI_REGISTRY_IMAGE/users" --set service.nodeport="$NODEPORT_STAGING_USERS"
    - helm upgrade --install orders ./charts/orders -n $NAMESPACE --values=values-orders.yml --set image.repository="$CI_REGISTRY_IMAGE/orders" --set service.nodeport="$NODEPORT_STAGING_ORDERS"


deploy-prod:
  image: docker:latest
  variables:
    NAMESPACE: prod
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    url: http://$IP_VM:$NODEPORT_PROD
  stage: deploy-prod
  when: manual
  only:
    - main
  extends: .do_testing
  script:
    - helm upgrade --install gateway ./charts/gateway -n $NAMESPACE --values=values-gateway.yml --set image.repository="$CI_REGISTRY_IMAGE/gateway" --set service.nodeport="$NODEPORT_PROD_GATEWAY"
    - helm upgrade --install users ./charts/users -n $NAMESPACE --values=values-users.yml --set image.repository="$CI_REGISTRY_IMAGE/users" --set service.nodeport="$NODEPORT_PROD_USERS"
    - helm upgrade --install orders ./charts/orders -n $NAMESPACE --values=values-orders.yml --set image.repository="$CI_REGISTRY_IMAGE/orders" --set service.nodeport="$NODEPORT_PROD_ORDERS"

    